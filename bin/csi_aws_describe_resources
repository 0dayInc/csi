#!/usr/bin/env ruby
require 'csi'
require 'aws-sdk'
require 'optparse'
require 'yaml'

opts = {}
OptionParser.new do |options|
  options.banner = %Q{USAGE:
    #{$0} [opts]
  }

  options.on("-cYAML", "--aws_yaml=YAML", "<Default - Path to YAML Config (Defaults to etc/aws/vagrant.yaml>") do |yaml| 
    opts[:yaml] = yaml
  end

  options.on("-AAKI", "--access_key_id=AKI", "<Alternative over Default - AWS Access Key ID>") do |aki| 
    opts[:aki] = aki
  end

  options.on("-SSAK", "--secret_access_key=SAK", "<Alternative over Default - Secret Access Key>") do |sak| 
    opts[:sak] = sak
  end

  options.on("-rREGION", "--region=REGION", "<More Secure than Default or Alt - Region to Retrieve STS Credentials>") do |region| 
    opts[:region] = region
  end

  options.on("-aARN", "--sts_role_arn=ARN", "<More Secure than Default or Alt - STS Role ARN>") do |sts_role_arn| 
    opts[:sts_role_arn] = sts_role_arn
  end

  options.on("-nRNAME", "--sts_role_name=RNAME", "<More Secure than Default or Alt - STS Role Name>") do |sts_role_name| 
    opts[:sts_role_name] = sts_role_name
  end

  options.on("-eEXPIRES", "--sts_expiration=EXPIRES", "<More Secure than Default or Alt - STS Expiration (Defaults to 900 Seconds)>") do |sts_exp| 
    opts[:sts_exp] = sts_exp
  end

end.parse!

if opts.empty?
  puts `#{$0} --help`
  exit 1
end 

logger = CSI::Plugins::CSILogger.create()

if opts[:yaml]
  yaml = YAML.load_file(opts[:yaml]) if File.exists?(opts[:yaml])
  access_key_id = yaml["access_key_id"].to_s.scrub.strip.chomp
  secret_access_key = yaml["secret_access_key"].to_s.scrub.strip.chomp
else
  access_key_id = opts[:aki].to_s.scrub
  secret_access_key = opts[:sak].to_s.scrub
end

region = opts[:region].to_s.scrub
sts_role_arn = opts[:sts_role_arn].to_s.scrub
sts_role_name = opts[:sts_role_name].to_s.scrub

if opts[:sts_exp].nil?
  sts_exp = 900
else
  sts_exp = opts[:sts_exp].to_i
end

if access_key_id == "" && secret_access_key == "" 
  credentials = CSI::Plugins::AWSSTS.get_temp_credentials(
    :region => region,
    :role_arn => sts_role_arn,
    :role_session_name => sts_role_name,
    :duration_seconds => sts_exp
  )
else
  credentials = Aws::Credentials.new(access_key_id, secret_access_key)
end

#:AWSAPIGateway,
#:AWSApplicationAutoScaling,
#:AWSApplicationDiscoveryService,
#:AWSAutoScaling,
#:AWSCloudFormation,
#:AWSCloudFront,
#:AWSCloudHSM,
#:AWSCloudSearch,
#:AWSCloudSearchDomain,
#:AWSCloudTrail,
#:AWSCloudWatch,
#:AWSCloudWatchEvents,
#:AWSCloudWatchLogs,
#:AWSCodeCommit,
#:AWSCodeDeploy,
#:AWSCodePipeline,
#:AWSCognitoIdentity,
#:AWSCognitoIdentityProvider,
#:AWSCognitoSync,
#:AWSConfigService,
#:AWSDataPipeline,
#:AWSDatabaseMigrationService,
#:AWSDeviceFarm,
#:AWSDirectConnect,
#:AWSDirectoryService,
#:AWSDynamoDB,
#:AWSDynamoDBStreams,
ec2_obj = CSI::Plugins::AWSEC2.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts ec2_obj.public_methods
CSI::Plugins::AWSEC2.disconnect(:ec2_obj => ec2_obj)
# :AWSECR,
# :AWSECS,
# :AWSEFS,
# :AWSEMR,
# :AWSElastiCache,
eb_obj = CSI::Plugins::AWSElasticBeanstalk.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts eb_obj.public_methods
CSI::Plugins::ElasticBeanstalk.disconnect(:eb_obj => eb_obj)
#:AWSElasticLoadBalancing,
#:AWSElasticLoadBalancingV2,
#:AWSElasticTranscoder,
#:AWSElasticsearchService,
#:AWSFirehose,
#:AWSGameLift,
#:AWSGlacier,
#:AWSIAM,
#:AWSImportExport,
#:AWSInspector,
#:AWSIoT,
#:AWSIoTDataPlane,
#:AWSKMS,
#:AWSKinesis,
#:AWSKinesisAnalytics,
lamb_obj = CSI::Plugins::AWSLambda.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts lamb_obj.public_methods
CSI::Plugins::AWSLambda.disconnect(:lamb_obj => lamb_obj)
#:AWSLambdaPreview,
#:AWSMachineLearning,
#:AWSMarketplaceCommerceAnalytics,
#:AWSMarketplaceMetering,
#:AWSOpsWorks,
#:AWSRDS,
#:AWSRedshift,
#:AWSRoute53,
#:AWSRoute53Domains,
s3_obj = CSI::Plugins::AWSS3.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts s3_obj.public_methods
CSI::Plugins::AWSS3.disconnect(:s3_obj => s3_obj)
#:AWSSES,
#:AWSSNS,
#:AWSSQS,
#:AWSSSM,
#:AWSSTS,
#:AWSSWF,
#:AWSServiceCatalog,
#:AWSSimpleDB,
#:AWSSnowball,
#:AWSStorageGateway,
#:AWSSupport,
#:AWSWAF,
#:AWSWorkspaces,
#:AnsibleVault,
