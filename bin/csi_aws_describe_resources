#!/usr/bin/env ruby
require 'csi'
require 'aws-sdk'
require 'optparse'
require 'yaml'

opts = {}
OptionParser.new do |options|
  options.banner = %Q{USAGE:
    #{$0} [opts]
  }

  options.on("-rREGION", "--region=REGION", "<Required - Region to Describe>") do |region| 
    opts[:region] = region
  end

  options.on("-cYAML", "--aws_yaml=YAML", "<Quickest - Path to YAML Config>") do |yaml| 
    opts[:yaml] = yaml
  end

  options.on("-AAKI", "--access_key_id=AKI", "<Alternative over Quickest - AWS Access Key ID>") do |aki| 
    opts[:aki] = aki
  end

  options.on("-SSAK", "--secret_access_key=SAK", "<Alternative over Quickest - Secret Access Key>") do |sak| 
    opts[:sak] = sak
  end

  options.on("-aARN", "--sts_role_arn=ARN", "<More Secure than Quickest or Alt - STS Role ARN>") do |sts_role_arn| 
    opts[:sts_role_arn] = sts_role_arn
  end

  options.on("-nRNAME", "--sts_role_name=RNAME", "<More Secure than Quickest or Alt - STS Role Name>") do |sts_role_name| 
    opts[:sts_role_name] = sts_role_name
  end

  options.on("-eEXPIRES", "--sts_expiration=EXPIRES", "<More Secure than Quickest or Alt - STS Expiration (Defaults to 900 Seconds)>") do |sts_exp| 
    opts[:sts_exp] = sts_exp
  end

end.parse!

if opts.empty?
  puts `#{$0} --help`
  exit 1
end 

logger = CSI::Plugins::CSILogger.create()

if opts[:yaml]
  yaml = YAML.load_file(opts[:yaml]) if File.exists?(opts[:yaml])
  access_key_id = yaml["access_key_id"].to_s.scrub.strip.chomp
  secret_access_key = yaml["secret_access_key"].to_s.scrub.strip.chomp
else
  access_key_id = opts[:aki].to_s.scrub
  secret_access_key = opts[:sak].to_s.scrub
end

region = opts[:region].to_s.scrub
sts_role_arn = opts[:sts_role_arn].to_s.scrub
sts_role_name = opts[:sts_role_name].to_s.scrub

if opts[:sts_exp].nil?
  sts_exp = 900
else
  sts_exp = opts[:sts_exp].to_i
end

if access_key_id == "" && secret_access_key == "" 
  credentials = CSI::Plugins::AWSSTS.get_temp_credentials(
    :region => region,
    :role_arn => sts_role_arn,
    :role_session_name => sts_role_name,
    :duration_seconds => sts_exp
  )
else
  credentials = Aws::Credentials.new(access_key_id, secret_access_key)
end

# BEGIN Describing Region ***
api_gateway_obj = CSI::Plugins::AWSAPIGateway.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts api_gateway_obj.public_methods
CSI::Plugins::AWSAPIGateway.disconnect(:api_gateway_obj => api_gateway_obj)

app_auto_scale_obj = CSI::Plugins::AWSApplicationAutoScaling.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts app_auto_scale_obj.public_methods
CSI::Plugins::AWSApplicationAutoScaling.disconnect(:app_auto_scale_obj => app_auto_scale_obj)

app_discover_svc_obj = CSI::Plugins::AWSApplicationDiscoveryService.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts app_discover_svc_obj.public_methods
CSI::Plugins::AWSApplicationDiscoveryService.disconnect(:app_discover_svc_obj => app_discover_svc_obj)

auto_scaling_obj = CSI::Plugins::AWSAutoScaling.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts auto_scaling_obj.public_methods
CSI::Plugins::AWSAutoScaling.disconnect(:auto_scaling_obj => auto_scaling_obj)

cloud_formation_obj = CSI::Plugins::AWSCloudFormation.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cloud_formation_obj.public_methods
CSI::Plugins::AWSCloudFormation.disconnect(:cloud_formation_obj => cloud_formation_obj)

cloud_front_obj = CSI::Plugins::AWSCloudFront.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cloud_front_obj.public_methods
CSI::Plugins::AWSCloudFront.disconnect(:cloud_front_obj => cloud_front_obj)

cloud_hsm_obj = CSI::Plugins::AWSCloudHSM.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cloud_hsm_obj.public_methods
CSI::Plugins::AWSCloudHSM.disconnect(:cloud_hsm_obj => cloud_hsm_obj)

cloud_search_obj = CSI::Plugins::AWSCloudSearch.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cloud_search_obj.public_methods
CSI::Plugins::AWSCloudSearch.disconnect(:cloud_search_obj => cloud_search_obj)

cloud_search_domain_obj = CSI::Plugins::AWSCloudSearchDomain.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cloud_search_domain_obj.public_methods
CSI::Plugins::AWSCloudSearchDomain.disconnect(:cloud_search_domain_obj => cloud_search_domain_obj)

cloud_trail_obj = CSI::Plugins::AWSCloudTrail.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cloud_trail_obj.public_methods
CSI::Plugins::AWSCloudTrail.disconnect(:cloud_trail_obj => cloud_trail_obj)

cloud_watch_obj = CSI::Plugins::AWSCloudWatch.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cloud_watch_obj.public_methods
CSI::Plugins::AWSCloudWatch.disconnect(:cloud_watch_obj => cloud_watch_obj)

cloud_watch_events_obj = CSI::Plugins::AWSCloudWatchEvents.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cloud_watch_events_obj.public_methods
CSI::Plugins::AWSCloudWatchEvents.disconnect(:cloud_watch_events_obj => cloud_watch_events_obj)

cloud_watch_logs_obj = CSI::Plugins::AWSCloudWatchLogs.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cloud_watch_logs_obj.public_methods
CSI::Plugins::AWSCloudWatchLogs.disconnect(:cloud_watch_logs_obj => cloud_watch_logs_obj)

code_commit_obj = CSI::Plugins::AWSCodeCommit.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts code_commit_obj.public_methods
CSI::Plugins::AWSCodeCommit.disconnect(:code_commit_obj => code_commit_obj)

code_deploy_obj = CSI::Plugins::AWSCodeDeploy.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts code_deploy_obj.public_methods
CSI::Plugins::AWSCodeDeploy.disconnect(:code_deploy_obj => code_deploy_obj)

code_pipeline_obj = CSI::Plugins::AWSCodePipeline.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts code_pipeline_obj.public_methods
CSI::Plugins::AWSCodePipeline.disconnect(:code_pipeline_obj => code_pipeline_obj)

cognito_identity_obj = CSI::Plugins::AWSCognitoIdentity.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cognito_identity_obj.public_methods
CSI::Plugins::AWSCognitoIdentity.disconnect(:cognito_identity_obj => cognito_identity_obj)

cognito_identity_prov_obj = CSI::Plugins::AWSCognitoIdentityProvider.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cognito_identity_prov_obj.public_methods
CSI::Plugins::AWSCognitoIdentityProvider.disconnect(:cognito_identity_prov_obj => cognito_identity_prov_obj)

cognito_sync_obj = CSI::Plugins::AWSCognitoSync.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts cognito_sync_obj.public_methods
CSI::Plugins::AWSCognitoSync.disconnect(:cognito_sync_obj => cognito_sync_obj)

config_service_obj = CSI::Plugins::AWSConfigService.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts config_service_obj.public_methods
CSI::Plugins::AWSConfigService.disconnect(:config_service_obj => config_service_obj)

data_pipeline_obj = CSI::Plugins::AWSDataPipeline.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts data_pipeline_obj.public_methods
CSI::Plugins::AWSDataPipeline.disconnect(:data_pipeline_obj => data_pipeline_obj)

db_migration_svc_obj = CSI::Plugins::AWSDatabaseMigrationService.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts db_migration_svc_obj.public_methods
CSI::Plugins::AWSDatabaseMigrationService.disconnect(:db_migration_svc_obj => db_migration_svc_obj)

device_farm_obj = CSI::Plugins::AWSDeviceFarm.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts device_farm_obj.public_methods
CSI::Plugins::AWSDeviceFarm.disconnect(:device_farm_obj => device_farm_obj)

direct_connect_obj = CSI::Plugins::AWSDirectConnect.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts direct_connect_obj.public_methods
CSI::Plugins::AWSDirectConnect.disconnect(:direct_connect_obj => direct_connect_obj)

directory_service_obj = CSI::Plugins::AWSDirectoryService.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts directory_service_obj.public_methods
CSI::Plugins::AWSDirectoryService.disconnect(:directory_service_obj => directory_service_obj)

dynamo_db_obj = CSI::Plugins::AWSDynamoDB.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts dynamo_db_obj.public_methods
CSI::Plugins::AWSDynamoDB.disconnect(:dynamo_db_obj => dynamo_db_obj)

dynamo_db_streams_obj = CSI::Plugins::AWSDynamoDBStreams.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts dynamo_db_streams_obj.public_methods
CSI::Plugins::AWSDynamoDBStreams.disconnect(:dynamo_db_streams_obj => dynamo_db_streams_obj)

ec2_obj = CSI::Plugins::AWSEC2.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts ec2_obj.public_methods
CSI::Plugins::AWSEC2.disconnect(:ec2_obj => ec2_obj)

ecr_obj = CSI::Plugins::AWSECR.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts ecr_obj.public_methods
CSI::Plugins::AWSECR.disconnect(:ecr_obj => ecr_obj)

ecs_obj = CSI::Plugins::AWSECS.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts ecs_obj.public_methods
CSI::Plugins::AWSECS.disconnect(:ecs_obj => ecs_obj)

efs_obj = CSI::Plugins::AWSEFS.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts efs_obj.public_methods
CSI::Plugins::AWSEFS.disconnect(:efs_obj => efs_obj)

emr_obj = CSI::Plugins::AWSEMR.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts emr_obj.public_methods
CSI::Plugins::AWSEMR.disconnect(:emr_obj => emr_obj)

elasti_cache_obj = CSI::Plugins::AWSElastiCache.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts elasti_cache_obj.public_methods
CSI::Plugins::AWSElastiCache.disconnect(:elasti_cache_obj => elasti_cache_obj)

eb_obj = CSI::Plugins::AWSElasticBeanstalk.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts eb_obj.public_methods
CSI::Plugins::AWSElasticBeanstalk.disconnect(:eb_obj => eb_obj)

elastic_load_balancing_obj = CSI::Plugins::AWSElasticLoadBalancing.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts elastic_load_balancing_obj.public_methods
CSI::Plugins::AWSElasticLoadBalancing.disconnect(:elastic_load_balancing_obj => elastic_load_balancing_obj)

elastic_lb_v2_obj = CSI::Plugins::AWSElasticLoadBalancingV2.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts elastic_lb_v2_obj.public_methods
CSI::Plugins::AWSElasticLoadBalancingV2.disconnect(:elastic_lb_v2_obj => elastic_lb_v2_obj)

elastic_transcoder_obj = CSI::Plugins::AWSElasticTranscoder.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts elastic_transcoder_obj.public_methods
CSI::Plugins::AWSElasticTranscoder.disconnect(:elastic_transcoder_obj => elastic_transcoder_obj)

elasticsearch_service_obj = CSI::Plugins::AWSElasticsearchService.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts elasticsearch_service_obj.public_methods
CSI::Plugins::AWSElasticsearchService.disconnect(:elasticsearch_service_obj => elasticsearch_service_obj)

firehose_obj = CSI::Plugins::AWSFirehose.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts firehose_obj.public_methods
CSI::Plugins::AWSFirehose.disconnect(:firehose_obj => firehose_obj)

game_lift_obj = CSI::Plugins::AWSGameLift.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts game_lift_obj.public_methods
CSI::Plugins::AWSGameLift.disconnect(:game_lift_obj => game_lift_obj)

glacier_obj = CSI::Plugins::AWSGlacier.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts glacier_obj.public_methods
CSI::Plugins::AWSGlacier.disconnect(:glacier_obj => glacier_obj)

iam_obj = CSI::Plugins::AWSIAM.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts iam_obj.public_methods
CSI::Plugins::AWSIAM.disconnect(:iam_obj => iam_obj)

import_export_obj = CSI::Plugins::AWSImportExport.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts import_export_obj.public_methods
CSI::Plugins::AWSImportExport.disconnect(:import_export_obj => import_export_obj)

inspector_obj = CSI::Plugins::AWSInspector.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts inspector_obj.public_methods
CSI::Plugins::AWSInspector.disconnect(:inspector_obj => inspector_obj)

iot_obj = CSI::Plugins::AWSIoT.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts iot_obj.public_methods
CSI::Plugins::AWSIoT.disconnect(:iot_obj => iot_obj)

iot_data_plane_obj = CSI::Plugins::AWSIoTDataPlane.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts iot_data_plane_obj.public_methods
CSI::Plugins::AWSIoTDataPlane.disconnect(:iot_data_plane_obj => iot_data_plane_obj)

kms_obj = CSI::Plugins::AWSKMS.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts kms_obj.public_methods
CSI::Plugins::AWSKMS.disconnect(:kms_obj => kms_obj)

kinesis_obj = CSI::Plugins::AWSKinesis.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts kinesis_obj.public_methods
CSI::Plugins::AWSKinesis.disconnect(:kinesis_obj => kinesis_obj)

kinesis_analytics_obj = CSI::Plugins::AWSKinesisAnalytics.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts kinesis_analytics_obj.public_methods
CSI::Plugins::AWSKinesisAnalytics.disconnect(:kinesis_analytics_obj => kinesis_analytics_obj)

lambda_obj = CSI::Plugins::AWSLambda.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts lambda_obj.public_methods
CSI::Plugins::AWSLambda.disconnect(:lambda_obj => lambda_obj)

lambda_preview_obj = CSI::Plugins::AWSLambdaPreview.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts lambda_preview_obj.public_methods
CSI::Plugins::AWSLambdaPreview.disconnect(:lambda_preview_obj => lambda_preview_obj)

machine_learning_obj = CSI::Plugins::AWSMachineLearning.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts machine_learning_obj.public_methods
CSI::Plugins::AWSMachineLearning.disconnect(:machine_learning_obj => machine_learning_obj)

marketplace_commerce_analytics_obj = CSI::Plugins::AWSMarketplaceCommerceAnalytics.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts marketplace_commerce_analytics_obj.public_methods
CSI::Plugins::AWSMarketplaceCommerceAnalytics.disconnect(:marketplace_commerce_analytics_obj => marketplace_commerce_analytics_obj)

marketplace_metering_obj = CSI::Plugins::AWSMarketplaceMetering.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts marketplace_metering_obj.public_methods
CSI::Plugins::AWSMarketplaceMetering.disconnect(:marketplace_metering_obj => marketplace_metering_obj)

ops_works_obj = CSI::Plugins::AWSOpsWorks.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts ops_works_obj.public_methods
CSI::Plugins::AWSOpsWorks.disconnect(:ops_works_obj => ops_works_obj)

rds_obj = CSI::Plugins::AWSRDS.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts rds_obj.public_methods
CSI::Plugins::AWSRDS.disconnect(:rds_obj => rds_obj)

redshift_obj = CSI::Plugins::AWSRedshift.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts redshift_obj.public_methods
CSI::Plugins::AWSRedshift.disconnect(:redshift_obj => redshift_obj)

r53_obj = CSI::Plugins::AWSRoute53.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts r53_obj.public_methods
CSI::Plugins::AWSRoute53.disconnect(:r53_obj => r53_obj)

#:AWSRoute53Domains,
r53_domains_obj = CSI::Plugins::AWSRoute53Domains.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts r53_domains_obj.public_methods
CSI::Plugins::AWSRoute53Domains.disconnect(:r53_domains_obj => r53_domains_obj)

s3_obj = CSI::Plugins::AWSS3.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts s3_obj.public_methods
CSI::Plugins::AWSS3.disconnect(:s3_obj => s3_obj)

ses_obj = CSI::Plugins::AWSSES.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts ses_obj.public_methods
CSI::Plugins::AWSSES.disconnect(:ses_obj => ses_obj)

sns_obj = CSI::Plugins::AWSSNS.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts sns_obj.public_methods
CSI::Plugins::AWSSNS.disconnect(:sns_obj => sns_obj)

sqs_obj = CSI::Plugins::AWSSQS.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts sqs_obj.public_methods
CSI::Plugins::AWSSQS.disconnect(:sqs_obj => sqs_obj)

ssm_obj = CSI::Plugins::AWSSSM.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts ssm_obj.public_methods
CSI::Plugins::AWSSSM.disconnect(:ssm_obj => ssm_obj)

swf_obj = CSI::Plugins::AWSSWF.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts swf_obj.public_methods
CSI::Plugins::AWSSWF.disconnect(:swf_obj => swf_obj)

service_catalog_obj = CSI::Plugins::AWSServiceCatalog.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts service_catalog_obj.public_methods
CSI::Plugins::AWSServiceCatalog.disconnect(:service_catalog_obj => service_catalog_obj)

simple_db_obj = CSI::Plugins::AWSSimpleDB.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts simple_db_obj.public_methods
CSI::Plugins::AWSSimpleDB.disconnect(:simple_db_obj => simple_db_obj)

snowball_obj = CSI::Plugins::AWSSnowball.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts snowball_obj.public_methods
CSI::Plugins::AWSSnowball.disconnect(:snowball_obj => snowball_obj)

storage_gateway_obj = CSI::Plugins::AWSStorageGateway.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts storage_gateway_obj.public_methods
CSI::Plugins::AWSStorageGateway.disconnect(:storage_gateway_obj => storage_gateway_obj)

support_obj = CSI::Plugins::AWSSupport.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts support_obj.public_methods
CSI::Plugins::AWSSupport.disconnect(:support_obj => support_obj)

waf_obj = CSI::Plugins::AWSWAF.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts waf_obj.public_methods
CSI::Plugins::AWSWAF.disconnect(:waf_obj => waf_obj)

workspaces_obj = CSI::Plugins::AWSWorkspaces.connect(
  :region => region, 
  :access_key_id => credentials.access_key_id, 
  :secret_access_key => credentials.secret_access_key, 
  :sts_session_token => credentials.session_token
)
puts workspaces_obj.public_methods
CSI::Plugins::AWSWorkspaces.disconnect(:workspaces_obj => workspaces_obj)
