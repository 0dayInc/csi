#!/usr/bin/env ruby
# frozen_string_literal: true

require 'csi'
require 'optparse'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{$PROGRAM_NAME} [opts]
  "

  options.on('-aAPIKEY', '--api_key=APIKEY', '<Required - OWASP Zap API Key (Tools>Options>API)>') do |t|
    opts[:target_url] = t
  end

  options.on('-tTARGET', '--target_url=TARGET', '<Required - Target URI to Scan>') do |t|
    opts[:target_url] = t
  end

  options.on('-oDIR', '--report_output_dir=DIR', '<Required - Output Directory for Active Scan Report>') do |o|
    opts[:output_path] = o
  end

  options.on('-rRTYPE', '--report_type=RTYPE', '<Required - Report Type html|markdown|xml>') do |r|
    opts[:report_type] = r
  end

  options.on('-IINST', '--navigation_instruct=INST', '<Required - Path to Navigation Instructions (e.g. Auth w/ Target - see ./etc/navigation.instruct for an example)>') do |i|
    opts[:navigation_instruct] = i
  end

  options.on('-h', '--[no-]headless', '<Optional - Run Owasp Zap and Browser Headless>') do |h|
    opts[:headless] = h
  end

  options.on('-zZPATH', '--zap_path=ZPATH', '<Optional - Path to zap.sh>') do |z|
    opts[:zap_path] = z
  end
end.parse!

if opts.empty?
  puts `#{$PROGRAM_NAME} --help`
  exit 1
end

begin
  logger = CSI::Plugins::CSILogger.create

  target_url = opts[:target_url].to_s.scrub
  output_path = opts[:output_path].to_s.scrub
  report_type = opts[:report_type].to_sym
  headless = opts[:headless]
  burp_jar_path = opts[:zap_path].to_s.scrub

  navigation_instruct = opts[:navigation_instruct]
  raise 'Invalid path to browser instructions.  Please check your spelling and try again.' unless File.exist?(navigation_instruct)

  # ------
  # Open Burp
  if headless
    burp_obj = CSI::Plugins::BurpSuite.start(
      burp_jar_path: burp_jar_path,
      headless: true,
      browser_type: :headless
    )
  else
    burp_obj = CSI::Plugins::BurpSuite.start(
      burp_jar_path: burp_jar_path,
      browser_type: :firefox
    )
  end

  logger.info(burp_obj)
  # Disable Proxy Intercepting Capabilities for this Driver
  CSI::Plugins::BurpSuite.disable_proxy(burp_obj: burp_obj)

  # Use a headless browser w/ JavaScript Support to Load Our Target
  # and Optionally Authenticate to Provide the Capability to Conduct
  # a Burp Active Scan in a Post-AuthN state.  Since our browsers
  # support JavaScript, DOM-based XSS vuln attempts are
  # possible as well since we have a DOM to interact w/
  # (Burp's DOM-XSS checks are based on static code analysis)
  navb = burp_obj[:burp_browser]
  File.read(navigation_instruct).each_line do |instruction|
    navb.instance_eval(instruction.to_s.scrub.strip.chomp)
  end
  sleep 60 # Sleep for now so everythign loads the way we expect - blech.

  json_scan_queue = CSI::Plugins::BurpSuite.invoke_active_scan(burp_obj: burp_obj, target_url: target_url)

  # Dump a list of scan issues from Active Scan result
  # scan_issues = CSI::Plugins::BurpSuite.get_scan_issues(:burp_obj => burp_obj)
  # puts scan_issues

  # TODO: Generate HTML REPORT
  CSI::Plugins::BurpSuite.generate_scan_report(
    burp_obj: burp_obj,
    report_type: report_type,
    output_path: output_path
  )

  CSI::Plugins::BurpSuite.stop(burp_obj: burp_obj)
rescue => e
  raise e
ensure
  CSI::Plugins::BurpSuite.stop(burp_obj: burp_obj) unless burp_obj.nil?
end
