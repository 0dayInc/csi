#!/usr/bin/env ruby
# frozen_string_literal: true

require 'csi'
require 'optparse'
require 'securerandom'
require 'pty'
require 'json'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{$PROGRAM_NAME} [opts]
  "

  options.on('-tTARGET', '--target_url=TARGET', '<Required - Target URI to Scan>') do |t|
    opts[:target_url] = t
  end

  options.on('-oDIR', '--report_output_dir=DIR', '<Required - Output Directory for Results Generation>') do |o|
    opts[:output_dir] = o
  end

  options.on('-IINST', '--navigation_instruct=INST', '<Required - Path to Navigation Instructions (e.g. Auth w/ Target - see /csi/etc/arachni/navigation-REST.instruct.EXAMPLE)>') do |i|
    opts[:navigation_instruct] = i
  end

  options.on('-pPROXY', '--proxy=PROXY', '<Optional - Proxy SCHEME://ADDRESS:PORT>') do |p|
    opts[:proxy] = p
  end

  options.on('-xTYPE', '--proxy-type=TYPE', '<Optional - Proxy Type (See arachni --help)>') do |x|
    opts[:proxy_type] = x
  end

  options.on('-ePATTERN', '--exclude-pattern=PATTERN', '<Optional - Exclude comma-delimited resources whose URL matches pattern>') do |e|
    opts[:exclude_pattern] = e
  end
end.parse!

if opts.empty?
  puts `#{$PROGRAM_NAME} --help`
  exit 1
end

begin
  logger = CSI::Plugins::CSILogger.create

  target_url = opts[:target_url].to_s.scrub
  output_dir = opts[:output_dir].to_s.scrub if Dir.exist?(opts[:output_dir].to_s.scrub)
  navigation_instruct = opts[:navigation_instruct].to_s.strip.chomp.scrub if File.exist?(opts[:navigation_instruct].to_s.strip.chomp.scrub)
  proxy = opts[:proxy]
  proxy_type = opts[:proxy_type]
  exclude_pattern = opts[:exclude_pattern]

  # Initiate rest_client object to pump requests through Arachni proxy plugin.
  rest_client = CSI::Plugins::TransparentBrowser.open(
    browser_type: :rest,
    proxy: 'http://127.0.0.1:8282'
  )::Request

  arachni_cmd_str = 'arachni --plugin=proxy'
  arachni_cmd_str = "#{arachni_cmd_str} --audit-with-both-methods --audit-parameter-names"
  arachni_cmd_str = "#{arachni_cmd_str} --audit-links --audit-forms --audit-cookies"
  arachni_cmd_str = "#{arachni_cmd_str} --report-save-path=#{output_dir}/arachni_results.afr"
  arachni_cmd_str = "#{arachni_cmd_str} --http-proxy #{proxy}" if proxy
  arachni_cmd_str = "#{arachni_cmd_str} --http-proxy-type #{proxy_type}" if proxy_type
  arachni_cmd_str = "#{arachni_cmd_str} #{target_url}"

  if exclude_pattern
    exclude_pattern.to_s.split(',').each do |exclude_entry|
      arachni_cmd_str = "#{arachni_cmd_str} --scope-exclude-pattern #{exclude_entry}"
    end
  end

  arachni_stdout_log_path = "/tmp/csi_arachni_rest-#{SecureRandom.hex}.log"
  arachni_stdout_log = File.new(arachni_stdout_log_path, 'w')
  # Immediately writes all buffered data in IO to disk
  arachni_stdout_log.sync = true
  arachni_stdout_log.fsync

  # Kick off scan as defined by csi_arachni_rest flags
  fork_pid = Process.fork do
    begin
      PTY.spawn("sudo /bin/bash --login -c \"#{arachni_cmd_str}\"") do |stdout, _stdin, _pid|
        stdout.each do |line|
          puts line
          arachni_stdout_log.puts line
        end
      end
    rescue PTY::ChildExited, SystemExit, Interrupt, Errno::EIO
      puts 'Spawned process exiting...'
      File.unlink(arachni_stdout_log_path) if File.exist?(arachni_stdout_log_path)
    rescue StandardError => e
      puts 'ERROR: Spawned process exiting...'
      File.unlink(arachni_stdout_log_path) if File.exist?(arachni_stdout_log_path)
      raise e
    end
  end
  Process.detach(fork_pid)

  # Watch for Arachni proxy plugin to intialize prior to invoking navigation-REST.instruct
  return_pattern = 'Proxy: The scan will resume once you visit the shutdown URL.'
  loop do
    if File.exist?(arachni_stdout_log_path)
      break if File.read(arachni_stdout_log_path).include?(return_pattern)
    end
    sleep 3
  end

  # Now that the proxy is up, we can run the navigation-REST.instruct through the Arachni
  # proxy plugin (http://127.0.0.1:8282) to train arachni how to interact w/ the API.
  instance_eval(File.read(navigation_instruct), navigation_instruct)
  puts "REST API Training Complete: #{navigation_instruct}"
  puts "Sleeping for 9s prior to proceeding..."
  sleep 9

  # Close rest_client used for training Arachni
  CSI::Plugins::TransparentBrowser.close(browser_obj: rest_client)

  trained_attack_vectors_yaml = "#{File.dirname(arachni_stdout_log_path)}/#{File.basname(arachni_stdout_log_path, File.extname(arachni_stdout_log_path))}.yaml"
  system("/bin/bash --login -c \"http_proxy=http://127.0.0.1:8282 curl http://arachni.proxy/panel/vectors.yaml -o #{trained_attack_vectors_yaml}\"")
  system('/bin/bash --login -c "http_proxy=http://127.0.0.1:8282 curl http://arachni.proxy/shutdown"')

  arachni_trained_cmd_str = "arachni --plugin=vector_feed:yaml_file=#{trained_attack_vectors_yaml}"
  arachni_trained_cmd_str = "#{arachni_cmd_str} --audit-with-both-methods --audit-parameter-names"
  arachni_trained_cmd_str = "#{arachni_cmd_str} --audit-links --audit-forms --audit-cookies"
  arachni_trained_cmd_str = "#{arachni_cmd_str} --report-save-path=#{output_dir}/arachni_results.afr"
  arachni_trained_cmd_str = "#{arachni_cmd_str} --http-proxy #{proxy}" if proxy
  arachni_trained_cmd_str = "#{arachni_cmd_str} --http-proxy-type #{proxy_type}" if proxy_type
  arachni_trained_cmd_str = "#{arachni_cmd_str} #{target_url}"

  system("sudo /bin/bash --login -c \"#{arachni_trained_cmd_str}\"")

  # Report Scan Results
  system("sudo /bin/bash --login -c \"arachni_reporter #{output_dir}/arachni_results.afr --reporter=html:outfile=#{output_dir}/arachni_results.html.zip\"")

  # Unzip Results in Output Dir
  system("sudo /bin/bash --login -c \"cd #{output_dir} && unzip -o arachni_results.html.zip\"")
rescue StandardError, SystemExit, Interrupt => e
  puts "ERROR: Something Happened"
  raise e
ensure
  Process.kill('TERM', fork_pid) unless fork_pid.nil?
  File.unlink(arachni_stdout_log_path) if File.exist?(arachni_stdout_log_path)
  File.unlink(trained_attack_vectors_yaml) if File.exist?(trained_attack_vectors_yaml)
end
