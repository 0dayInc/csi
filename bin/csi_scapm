#!/usr/bin/env ruby
# frozen_string_literal: true
require 'csi'
require 'thread'
require 'optparse'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{$0} [opts]
  "

  options.on('-dDIR', '--dir_path=DIR', '<Required - Root of Git Repo to Target>') {|d| opts[:dir_path] = d }
  options.on('-uGITURI', '--git_repo_root_uri=GITURI', '<Required - HTTP URI of Git Repo Scanned>') {|u| opts[:git_repo_root_uri] = u }
  options.on('-tTHREADS', '--max_threads=THREADS', '<Optional # Test Cases to Run Simultaneously (Default 25)>') {|t| opts[:max_threads] = t }
end.parse!

if opts.empty?
  puts `#{$0} --help`
  exit 1
end

dir_path = opts[:dir_path].to_s.scrub
raise "ERROR: Invalid Directory #{dir_path}" unless File.directory?(dir_path)
git_repo_root_uri = opts[:git_repo_root_uri].to_s.scrub
max_threads = opts[:max_threads]

# Define Test Cases to Run & Start Thread Pool
test_cases = [
  :ApacheFileSystemUtilAPI,
  :AMQPConnectAsGuest,
  :AWS,
  :BannedFunctionCallsC,
  :Base64,
  :BeefHook,
  :CmdExecutionJava,
  :CmdExecutionPython,
  :CmdExecutionRuby,
  :CmdExecutionScala,
  :CSRF,
  :Emoticon,
  :Eval,
  :InnerHTML,
  :FilePermission,
  :Factory,
  :Logger,
  :Keystore,
  :Password,
  :PomVersion,
  :Port,
  :Redirect,
  :ReDOS,
  :SQL,
  :SSL,
  :TaskTag,
  :ThrowErrors,
  :Token,
  :Version
]


$results_hash = { data: [] }
mutex = Mutex.new

CSI::Plugins::ThreadPool.fill(enumerable_array: test_cases, max_threads: max_threads) do |test_case|
  begin
    sca_arr = CSI::SCAPM.const_get(test_case.to_s.scrub).scan(dir_path: dir_path, git_repo_root_uri: git_repo_root_uri)
    sca_arr.each do |hash_line|
      mutex.synchronize do
        # TODO: instead of using a hash, perist JSON to NOSQL DB in favor of creating a flat JSON file
        $results_hash[:data].push(hash_line)
      end
    end
  rescue => e
    raise "Something happened to threaded test case #{test_case}: #{e}"
  end
end

# Generate HTML Report
print "#{0} Generating Report..."
# TODO: instead of passing results hash, pass filename of NOSQL DB (Persisted LokiJS?)
CSI::Reports::SCAPM.generate(
  dir_path: dir_path,
  results_hash: $results_hash
)
puts 'complete.'
