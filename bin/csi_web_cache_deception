#!/usr/bin/env ruby
# frozen_string_literal: true
require 'csi'
require 'optparse'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{$PROGRAM_NAME} [opts]
  "

  options.on('-tURL', '--target-url=URL', '<Required - URL to Target>') do |t|
    opts[:target_url] = t
  end

  options.on('-dDIR', '--output-dir=DIR', '<Required - Directory to Save Results>') do |d|
    opts[:output_dir] = d
  end

  options.on('-pPROXY', '--proxy=PROXY', '<Optional - HTTP or Socks Proxy>') do |p|
    opts[:proxy] = p
  end

  options.on('-T', '--[no-]with-tor', '<Optional - Proxy w/ TOR (Defaults to false)>') do |w|
    opts[:with_tor] = w
  end

  options.on('-S', '--[no-]spider-fqdn', '<Optional - Spider Target FQDN>') do |s|
    opts[:spider] = s
  end
end.parse!

if opts.empty?
  puts `#{$PROGRAM_NAME} --help`
  exit 1
end

# Required Flag Variables
target_url = opts[:target_url].to_s.scrub.strip.chomp
output_dir = opts[:output_dir].to_s.scrub.strip.chomp if Dir.exist?(opts[:output_dir].to_s.scrub.strip.chomp)

proxy = opts[:proxy].to_s.scrub.strip.chomp unless opts[:proxy].nil?
with_tor = opts[:with_tor]

if opts[:spider]
  spider = true
else
  spider = false
end

spider_results = "#{output_dir}/#{File.basename($PROGRAM_NAME)}.spider"
output_results = "#{output_dir}/#{File.basename($PROGRAM_NAME)}.results"

# Colors!
@dark_red = "\e[1m\e[31m"
@green = "\e[32m"
@yellow = "\e[33m"
@end_of_color = "\e[0m"

begin
  def get_web_cache_deception(opts = {})
    browser_obj = opts[:browser_obj]
    target_url = opts[:target_url].to_s.scrub.chomp.strip
    payload = opts[:payload].to_s.scrub.chomp.strip

    # Browse to original page to compare response lengths
    browser_obj.goto(target_url)
    orig_url_response_length = browser_obj.html.length

    if target_url.include?('?')
      injected_target_url = URI.parse(target_url)
      # Add non-existent file at the end of the path
      injected_target_url.path = "#{injected_target_url.path.to_s.chomp('/')}/wcd.#{payload}"
      web_cache_deception_url = injected_target_url.to_s

      browser_obj.goto(injected_target_url.to_s)
      injected_url_response_length = browser_obj.html.length

      if injected_url_response_length == orig_url_response_length
        puts "\n#{@dark_red}Alert! Potential Candidate: #{web_cache_deception_url}#{@end_of_color}\n"
        return "Alert! Potential Candidate: #{web_cache_deception_url}"
      else
        print "#{@yellow}.#{@end_of_color}"
        return "Response Length Mismatch: Orig Len: #{orig_url_response_length} | Inj Len: #{injected_url_response_length} | WCD: #{web_cache_deception_url}"
      end
    else
      web_cache_deception_url = "#{target_url.chomp('/')}/wcd.#{payload}"
      browser_obj.goto(web_cache_deception_url)
      wcd_url_response_length = browser_obj.html.length

      if orig_url_response_length == wcd_url_response_length
        puts "\n#{@dark_red}Alert! Potential Candidate: #{web_cache_deception_url}#{@end_of_color}\n"
        return "Alert! Potential Candidate: #{web_cache_deception_url}"
      else
        print "#{@yellow}.#{@end_of_color}"
        return "Response Length Mismatch: Orig Len: #{orig_url_response_length} | WCD Len: #{wcd_url_response_length} | WCD: #{web_cache_deception_url}"
      end
    end
  rescue Net::ReadTimeout => nrt
    return "#{nrt} Orig: #{target_url} | WCD: #{web_cache_deception_url}"
  rescue => e
    raise e
  end

  if proxy
    if with_tor
      browser_obj = CSI::Plugins::TransparentBrowser.open(
        browser_type: :chrome,
        proxy: proxy,
        with_tor: true
      )
    else
      browser_obj = CSI::Plugins::TransparentBrowser.open(
        browser_type: :chrome,
        proxy: proxy
      )
    end
  else
    browser_obj = CSI::Plugins::TransparentBrowser.open(browser_type: :chrome)
  end

  puts "#{@green}Navigating to Target FQDN: #{target_fqdn}#{@end_of_color}\n\n\n"
  browser_obj.goto(target_url)

  if spider
    if File.exist?(spider_results)
      puts "#{@dark_red}Using Existing Spider Results: #{spider_results}#{@end_of_color}"
    else
      puts "#{@dark_red}Spidering Target FQDN: #{target_url}#{@end_of_color}"
      CSI::WWW::Spider.crawl(
        target_fqdn: target_url,
        results_path: spider_results
      )
    end
  end

  web_cache_deception_payload_arr = %w(
    aif aiff au avi bin bmp cab carb cct cdf class css doc dcr dtd gcf gff gif grv hdml hqx ico ini jpeg jpg js mov mp3 mp4 nc pct ppc pws swa swf txt vbs w32 wav wbmp wml wmlc wmls wmlsc xsd zip
  )

  File.open(output_results, 'w') do |f|
    web_cache_deception_payload_arr.each do |payload|
      if spider
        File.readlines(spider_results).uniq.each do |this_page|
          http_result = get_web_cache_deception(browser_obj: browser_obj, target_url: this_page, payload: payload)
          f.puts http_result
        end
      else
        http_result = get_web_cache_deception(browser_obj: browser_obj, target_url: target_url, payload: payload)
        f.puts http_result
      end
    end
  end
rescue => e
  raise e
ensure
  browser_obj = CSI::Plugins::TransparentBrowser.close(browser_obj: browser_obj) unless browser_obj.nil?
end
