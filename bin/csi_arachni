#!/usr/bin/env ruby
# frozen_string_literal: true

require 'csi'
require 'optparse'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{$PROGRAM_NAME} [opts]
  "

  options.on('-tTARGET', '--target_url=TARGET', '<Required - Target URI to Scan>') do |t|
    opts[:target_url] = t
  end

  options.on('-oDIR', '--report_output_dir=DIR', '<Required - Output Directory for Results Generation>') do |o|
    opts[:output_dir] = o
  end

  options.on('-IINST', '--navigation_instruct=INST', '<Optional - Path to Navigation Instructions (e.g. Auth w/ Target - see /csi/etc/arachni/navigation.instruct for an example)>') do |i|
    opts[:navigation_instruct] = i
  end

  options.on('-pPROXY', '--proxy=PROXY', '<Optional - Proxy ADDRESS:PORT>') do |p|
    opts[:proxy] = p
  end

  options.on('-xTYPE', '--proxy-type=TYPE', '<Optional - Proxy Type (See arachni --help)>') do |x|
    opts[:proxy_type] = x
  end
end.parse!

if opts.empty?
  puts `#{$PROGRAM_NAME} --help`
  exit 1
end

begin
  logger = CSI::Plugins::CSILogger.create

  target_url = opts[:target_url].to_s.scrub
  navigation_instruct = opts[:navigation_instruct].to_s.strip.chomp.scrub if File.exist?(opts[:navigation_instruct].to_s.strip.chomp.scrub)
  proxy = opts[:proxy].to_s.scrub
  proxy_type = opts[:proxy_type].to_s.scrub
  output_dir = opts[:output_dir].to_s.scrub if Dir.exist?(opts[:output_dir].to_s.scrub)

  arachni_cmd_str = "arachni #{target_url} --report-save-path=#{output_dir}/arachni_results.afr"
  arachni_cmd_str = "#{arachni_cmd_str} --http-proxy #{proxy}" if proxy
  arachni_cmd_str = "#{arachni_cmd_str} --http-proxy-type #{proxy_type}" if proxy_type
  arachni_cmd_str = "#{arachni_cmd_str} --plugin=login_script:script=#{navigation_instruct}" if navigation_instruct

  # Kick off scan as defined by csi_arachni flags
  system("sudo /bin/bash --login -c \"#{arachni_cmd_str}\"")

  # Report Scan Results
  system("sudo /bin/bash --login -c \"arachni_reporter #{output_dir}/arachni_results.afr --reporter=html:outfile=#{output_dir}/arachni_results.html.zip\"")

  # Unzip Results in Output Dir
  system("sudo /bin/bash --login -c \"cd #{output_dir} && unzip -o arachni_results.html.zip\"")
rescue => e
  raise e
end
