#!/usr/bin/env ruby
# frozen_string_literal: true
require 'csi'
require 'optparse'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{$PROGRAM_NAME} [opts]
  "

  options.on('-tFQDN', '--target-fqdn=FQDN', '<Required - FQDN to Target>') do |t|
    opts[:target_fqdn] = t
  end

  options.on('-dDIR', '--output-dir=DIR', '<Required - Directory to Save Results>') do |d|
    opts[:output_dir] = d
  end

  options.on('-bTYPE', '--browser-type=BROWSER', '<Optional - Browser Type :chrome|:firefox|:headless (Default)>') do |b|
    opts[:browser_type] = b
  end

  options.on('-pPROXY', '--proxy=PROXY', '<Optional - HTTP or Socks Proxy>') do |p|
    opts[:proxy] = p
  end

  options.on('-T', '--[no-]with-tor', '<Optional - Proxy w/ TOR (Defaults to false)>') do |w|
    opts[:with_tor] = w
  end
end.parse!

if opts.empty?
  puts `#{$PROGRAM_NAME} --help`
  exit 1
end

# Required Flag Variables
target_fqdn = opts[:target_fqdn].to_s.scrub.strip.chomp
output_dir = opts[:output_dir].to_s.scrub.strip.chomp if Dir.exist?(opts[:output_dir].to_s.scrub.strip.chomp)
proxy = opts[:proxy].to_s.scrub.strip.chomp unless opts[:proxy].nil?

if opts[:browser_type]
  browser_type = opts[:browser_type].to_s.scrub.strip.chomp.to_sym
else
  browser_type = :headless
end

with_tor = opts[:with_tor]

# Colors!
dark_red = "\001\e[1m\002\001\e[31m\002"
green = "\001\e[32m\002"
yellow = "\001\e[33m\002"
end_of_color = "\001\e[0m\002"

begin
  if proxy
    if with_tor
      browser_obj = CSI::Plugins::TransparentBrowser.open(
        browser_type: browser_type,
        proxy: proxy,
        with_tor: true
      )
    else
      browser_obj = CSI::Plugins::TransparentBrowser.open(
        browser_type: browser_type,
        proxy: proxy
      )
    end
  else
    browser_obj = CSI::Plugins::TransparentBrowser.open(browser_type: browser_type)
  end

  puts "#{dark_red}Navigating to Target FQDN: #{target_fqdn}#{end_of_color}\n\n\n"
  browser_obj.goto(target_fqdn)
  browser_obj.scripts.each do |script|
    if script.src == ''
      # Save a copy of the outer_html
      puts "#{yellow}Saving OuterHTML of Native '<script>' Element#{end_of_color}"
      sha256_hexdigest = OpenSSL::Digest::SHA256.hexdigest(script.outer_html)
      script_results = "#{output_dir}/#{sha256_hexdigest}.js"
      File.open(script_results, 'w') do |f|
        f.puts script.outer_html
      end
    else
      # Save a copy of the script
      puts "#{yellow}Navigating to #{script.src}#{end_of_color}"
      browser_obj.goto(script.src)
      sha256_hexdigest = OpenSSL::Digest::SHA256.hexdigest(browser_obj.text)
      uri = URI.parse(browser_obj.url)
      script_filename = File.basename(uri.path)
      script_results = "#{output_dir}/#{File.basename(script_filename, '.*')}-#{sha256_hexdigest}#{File.extname(script_filename)}".to_s.scrub.chomp.strip
      File.open(script_results, 'w') do |f|
        f.puts browser_obj.text
      end
      browser_obj.back
    end
    puts "#{green}Saved #{script_results}#{end_of_color}\n\n\n"
  end

  # Run DOM XSS SCAPM Test Cases
  # TODO: make -u flag dynamic
  puts `csi_scapm -d #{output_dir} -t 1 -T InnerHTML -u 'http://127.0.0.1'`

  # page_script_elements = browser_obj.execute_script("
  #   // JavaScript - find all script elements
  #   var script_elements = [];
  #   var script_query = document.querySelectorAll('script');
  #   for (var i = 0; i < script_query.length; i++) {
  #     script_elements.push(script_query[i]);
  #   }
  #   return script_elements;
  # ")
rescue => e
  raise e
ensure
  browser_obj = CSI::Plugins::TransparentBrowser.close(browser_obj: browser_obj)
end
